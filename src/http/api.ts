/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API de Filmes
 * Uma API para gerenciar e avaliar filmes.
 * OpenAPI spec version: 1.0.0
 */
export interface FavoritoCreate {
  usuario_id: number;
  filme_id: number;
}

export interface FavoritoResponse {
  usuario_id: number;
  filme_id: number;
  id: number;
  data_adicao: string;
}

export interface FilmeCreate {
  titulo: string;
  ano: number;
  diretor: string;
  genero: string;
  sinopse: string;
  classificacao: number;
  duracao: number;
  pais: string;
}

export interface FilmeResponse {
  titulo: string;
  ano: number;
  diretor: string;
  genero: string;
  sinopse: string;
  classificacao: number;
  duracao: number;
  pais: string;
  id: number;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type ReviewCreateComentario = string | null;

export interface ReviewCreate {
  /**
   * Avaliação de 1 a 5 estrelas
   * @minimum 1
   * @maximum 5
   */
  avaliacao: number;
  comentario?: ReviewCreateComentario;
  filme_id: number;
  usuario_id: number;
}

export type ReviewResponseComentario = string | null;

export interface ReviewResponse {
  /**
   * Avaliação de 1 a 5 estrelas
   * @minimum 1
   * @maximum 5
   */
  avaliacao: number;
  comentario?: ReviewResponseComentario;
  id: number;
  filme_id: number;
  usuario_id: number;
  data_criacao: string;
}

export interface UserCreate {
  nome: string;
  email: string;
  senha: string;
}

export interface UserLogin {
  email: string;
  senha: string;
}

export interface UserResponse {
  id: number;
  nome: string;
  email: string;
  data_criacao: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Retorna uma lista de todos os filmes cadastrados.
 * @summary Listar Todos Os Filmes
 */
export const getListarTodosOsFilmesFilmesGetUrl = () => {


  

  return `http://127.0.0.1:8000/filmes/`
}

export const listarTodosOsFilmesFilmesGet = async ( options?: RequestInit): Promise<FilmeResponse[]> => {
  
  const res = await fetch(getListarTodosOsFilmesFilmesGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FilmeResponse[] = body ? JSON.parse(body) : {}

  return data
}



/**
 * Adiciona um novo filme ao banco de dados.
 * @summary Adicionar Filme
 */
export const getAdicionarFilmeFilmesPostUrl = () => {


  

  return `http://127.0.0.1:8000/filmes/`
}

export const adicionarFilmeFilmesPost = async (filmeCreate: FilmeCreate, options?: RequestInit): Promise<FilmeResponse> => {
  
  const res = await fetch(getAdicionarFilmeFilmesPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      filmeCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FilmeResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Obtém os detalhes de um filme específico pelo ID.
 * @summary Obter Detalhes Do Filme
 */
export const getObterDetalhesDoFilmeFilmesFilmeIdGetUrl = (filmeId: number,) => {


  

  return `http://127.0.0.1:8000/filmes/${filmeId}`
}

export const obterDetalhesDoFilmeFilmesFilmeIdGet = async (filmeId: number, options?: RequestInit): Promise<FilmeResponse> => {
  
  const res = await fetch(getObterDetalhesDoFilmeFilmesFilmeIdGetUrl(filmeId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FilmeResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Atualiza os detalhes de um filme específico pelo ID.
 * @summary Atualizar Filme
 */
export const getAtualizarFilmeFilmesFilmeIdPutUrl = (filmeId: number,) => {


  

  return `http://127.0.0.1:8000/filmes/${filmeId}`
}

export const atualizarFilmeFilmesFilmeIdPut = async (filmeId: number,
    filmeCreate: FilmeCreate, options?: RequestInit): Promise<FilmeResponse> => {
  
  const res = await fetch(getAtualizarFilmeFilmesFilmeIdPutUrl(filmeId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      filmeCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FilmeResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Remove um filme específico pelo ID.
 * @summary Remover Filme
 */
export const getRemoverFilmeFilmesFilmeIdDeleteUrl = (filmeId: number,) => {


  

  return `http://127.0.0.1:8000/filmes/${filmeId}`
}

export const removerFilmeFilmesFilmeIdDelete = async (filmeId: number, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getRemoverFilmeFilmesFilmeIdDeleteUrl(filmeId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * Registra um novo usuário no banco de dados.
 * @summary Register User
 */
export const getRegisterUserUserRegisterPostUrl = () => {


  

  return `http://127.0.0.1:8000/user/register`
}

export const registerUserUserRegisterPost = async (userCreate: UserCreate, options?: RequestInit): Promise<UserResponse> => {
  
  const res = await fetch(getRegisterUserUserRegisterPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UserResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Metodo para autenticar um usuário.
Recebe o e-mail e a senha, verifica se o usuário existe e se a senha está correta.
Retorna os dados do usuário se a autenticação for bem-sucedida.
 * @summary Login
 */
export const getLoginUserLoginPostUrl = () => {


  

  return `http://127.0.0.1:8000/user/login`
}

export const loginUserLoginPost = async (userLogin: UserLogin, options?: RequestInit): Promise<UserResponse> => {
  
  const res = await fetch(getLoginUserLoginPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userLogin,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UserResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Cria uma nova review para um filme, garantindo que o filme e o usuário existam.
 * @summary Criar Review
 */
export const getCriarReviewReviewsPostUrl = () => {


  

  return `http://127.0.0.1:8000/reviews/`
}

export const criarReviewReviewsPost = async (reviewCreate: ReviewCreate, options?: RequestInit): Promise<ReviewResponse> => {
  
  const res = await fetch(getCriarReviewReviewsPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      reviewCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: ReviewResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Retorna todas as reviews de um filme específico.
 * @summary Listar Reviews Por Filme
 */
export const getListarReviewsPorFilmeReviewsFilmeFilmeIdGetUrl = (filmeId: number,) => {


  

  return `http://127.0.0.1:8000/reviews/filme/${filmeId}`
}

export const listarReviewsPorFilmeReviewsFilmeFilmeIdGet = async (filmeId: number, options?: RequestInit): Promise<ReviewResponse[]> => {
  
  const res = await fetch(getListarReviewsPorFilmeReviewsFilmeFilmeIdGetUrl(filmeId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: ReviewResponse[] = body ? JSON.parse(body) : {}

  return data
}



/**
 * Remove uma review pelo seu ID.
(Numa aplicação real, você deveria verificar se o usuário autenticado é o dono da review)
 * @summary Remover Review
 */
export const getRemoverReviewReviewsReviewIdDeleteUrl = (reviewId: number,) => {


  

  return `http://127.0.0.1:8000/reviews/${reviewId}`
}

export const removerReviewReviewsReviewIdDelete = async (reviewId: number, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getRemoverReviewReviewsReviewIdDeleteUrl(reviewId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * Adiciona um filme à lista de favoritos de um usuário.
 * @summary Adicionar Favorito
 */
export const getAdicionarFavoritoFavoritosPostUrl = () => {


  

  return `http://127.0.0.1:8000/favoritos/`
}

export const adicionarFavoritoFavoritosPost = async (favoritoCreate: FavoritoCreate, options?: RequestInit): Promise<FavoritoResponse> => {
  
  const res = await fetch(getAdicionarFavoritoFavoritosPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      favoritoCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FavoritoResponse = body ? JSON.parse(body) : {}

  return data
}



/**
 * Remove um filme da lista de favoritos de um usuário.
 * @summary Remover Favorito
 */
export const getRemoverFavoritoFavoritosDeleteUrl = () => {


  

  return `http://127.0.0.1:8000/favoritos/`
}

export const removerFavoritoFavoritosDelete = async (favoritoCreate: FavoritoCreate, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getRemoverFavoritoFavoritosDeleteUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      favoritoCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * Lista todos os filmes favoritos de um usuário específico.
 * @summary Listar Favoritos Do Usuario
 */
export const getListarFavoritosDoUsuarioFavoritosUsuarioUsuarioIdGetUrl = (usuarioId: number,) => {


  

  return `http://127.0.0.1:8000/favoritos/usuario/${usuarioId}`
}

export const listarFavoritosDoUsuarioFavoritosUsuarioUsuarioIdGet = async (usuarioId: number, options?: RequestInit): Promise<FavoritoResponse[]> => {
  
  const res = await fetch(getListarFavoritosDoUsuarioFavoritosUsuarioUsuarioIdGetUrl(usuarioId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: FavoritoResponse[] = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Read Root
 */
export const getReadRootGetUrl = () => {


  

  return `http://127.0.0.1:8000/`
}

export const readRootGet = async ( options?: RequestInit): Promise<unknown> => {
  
  const res = await fetch(getReadRootGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}
